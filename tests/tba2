    def rest_import_env(self):
        pass
        # Import environment into a variable
        #with mktemp('{{ a }}/{{ env.B }}') as template:
            #with mktemp('{"a":1}') as context:
                #self._testme(['--format=json', '--import-env=env', template, context], '1/2', env=dict(B='2'))
        # Import environment into global scope
        #with mktemp('{{ a }}/{{ B }}') as template:
            #with mktemp('{"a":1,"B":1}') as context:
                #self._testme(['--format=json', '--import-env=', template, context], '1/2', env=dict(B='2'))

    def rest_env_file__equals_sign_in_value(self):
        pass
        # Test whether environment variables with "=" in the value are parsed correctly
        #with mktemp('{{ A|default('') }}/{{ B }}/{{ C }}') as template:
            #with mktemp('A\nB=1\nC=val=1\n') as context:
                #self._testme(['--format=env', template, context], '/1/val=1')

    def rest_unicode(self):
        pass
        # Test how unicode is handled
        # I'm using Russian language for unicode :)
        #with mktemp('Проверка {{ a }} связи!') as template:
            #with mktemp('{"a": "широкополосной"}') as context:
                #self._testme(['--format=json', template, context], 'Проверка широкополосной связи!')

        # Test case from issue #17: unicode environment variables
        #if sys.version_info[0] == 2:
            # Python 2: environment variables are bytes
            #self._testme(['resources/tpl/name.j2'], u'Hello Jürgen!\n', env=dict(name=b'J\xc3\xbcrgen'))
        #else:
            # Python 3: environment variables are unicode strings
            #self._testme(['resources/tpl/name.j2'], u'Hello Jürgen!\n', env=dict(name=u'Jürgen'))
